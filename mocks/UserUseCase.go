// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/frederikdaniel7/go-gin-library-api/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, body
func (_m *UserUseCase) CreateUser(ctx context.Context, body dto.CreateUserBody) (*dto.User, error) {
	ret := _m.Called(ctx, body)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUserBody) *dto.User); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateUserBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, title
func (_m *UserUseCase) GetUsers(ctx context.Context, title string) ([]dto.User, error) {
	ret := _m.Called(ctx, title)

	var r0 []dto.User
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.User); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, body
func (_m *UserUseCase) Login(ctx context.Context, body dto.LoginBody) error {
	ret := _m.Called(ctx, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginBody) error); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

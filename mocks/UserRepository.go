// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/frederikdaniel7/go-gin-library-api/dto"
	entity "github.com/frederikdaniel7/go-gin-library-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, body
func (_m *UserRepository) CreateUser(ctx context.Context, body dto.CreateUserBody) (*entity.User, error) {
	ret := _m.Called(ctx, body)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUserBody) *entity.User); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateUserBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *UserRepository) FindAll(ctx context.Context) ([]entity.User, error) {
	ret := _m.Called(ctx)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context) []entity.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSimilarUserByName provides a mock function with given fields: ctx, name
func (_m *UserRepository) FindSimilarUserByName(ctx context.Context, name string) ([]entity.User, error) {
	ret := _m.Called(ctx, name)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) FindUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserById provides a mock function with given fields: ctx, id
func (_m *UserRepository) FindUserById(ctx context.Context, id int64) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserPassword provides a mock function with given fields: ctx, body
func (_m *UserRepository) FindUserPassword(ctx context.Context, body dto.LoginBody) (string, error) {
	ret := _m.Called(ctx, body)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginBody) string); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
